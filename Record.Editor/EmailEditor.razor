@inherits BaseEditor<Email>
@using FluentValidation
@inject IServiceProvider ServiceProvider

<InputText type="@ControlName" id="@ControlId" @bind-Value="@ProxyValue" class="form-control" readonly="@IsReadOnly" />

@code {
    private string _proxyValue;

    public override string ControlName => "email";

    // This property acts as a proxy for the actual immutable Email record
    private string ProxyValue
    {
        get => _proxyValue;
        set
        {
            if (_proxyValue != value)
            {
                _proxyValue = value;
                var newEmail = new Email(value);
                if (ValidateEmail(newEmail))
                {
                    Value = newEmail; // Only update the Value if the new value is valid
                    ValueChanged.InvokeAsync(newEmail);
                }
            }
        }
    }

    protected override void OnParametersSet()
    {
        _proxyValue = Value?.Value ?? string.Empty;
    }

    private bool ValidateEmail(Email email)
    {
        var validator = ServiceProvider.GetService<EmailValidator>() ?? new EmailValidator();
        var result = validator.Validate(email);

        // If you have a way to display validation errors, add that logic here.
        // For simplicity, this example just returns whether the email is valid or not.
        return result.IsValid;
    }
}